import { z } from 'zod';// Schéma de base pour les IDsexport const idSchema = z.string().uuid('ID invalide');// Schéma pour les nomsexport const nameSchema = z  .string()  .min(2, 'Le nom doit contenir au moins 2 caractères')  .max(100, 'Le nom ne peut pas dépasser 100 caractères')  .transform((val) => val.trim());// Schéma pour les datesexport const dateSchema = z.string().refine(  (date) => {    const parsedDate = new Date(date);    return !isNaN(parsedDate.getTime());  },  { message: 'Format de date invalide' },);// Schéma pour les chevauxexport const horseSchema = z.object({  name: nameSchema,  dateOfBirth: dateSchema.optional(),  sex: z.enum(['M', 'F', 'G']).optional(),  color: z.string().max(50, 'Couleur trop longue').optional(),  country: z.string().length(2, 'Code pays invalide').optional(),  sire: nameSchema.optional(),  dam: nameSchema.optional(),  owner: nameSchema.optional(),  trainer: nameSchema.optional(),  jockey: nameSchema.optional(),});// Schéma pour les coursesexport const raceSchema = z.object({  name: nameSchema,  date: dateSchema,  time: z    .string()    .regex(      /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/,      "Format d'heure invalide (HH:MM)",    ),  racecourseId: idSchema,  distance: z.number().min(800).max(4000),  surface: z.enum(['TURF', 'DIRT', 'SYNTHETIC']),  category: z.enum(['PLAT', 'OBSTACLES', 'TROT']),  purse: z.number().min(0).optional(),  maxRunners: z.number().min(2).max(20).default(16),  conditions: z.string().max(500, 'Conditions trop longues').optional(),});// Schéma pour les requêtes de rechercheexport const searchSchema = z.object({  query: z.string().min(1, 'Recherche vide').max(100, 'Recherche trop longue'),  type: z.enum(['horse', 'jockey', 'trainer', 'owner', 'race']).optional(),  limit: z.number().min(1).max(50).default(20),  offset: z.number().min(0).default(0),});// Types TypeScript générésexport type HorseDto = z.infer<typeof horseSchema>;export type RaceDto = z.infer<typeof raceSchema>;export type SearchDto = z.infer<typeof searchSchema>;