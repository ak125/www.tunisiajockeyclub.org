import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  Query,
  Logger,
  BadRequestException,
  NotFoundException,
} from '@nestjs/common';
import { IFHARatingService } from './ifha-rating-simple.service';
import { PrismaService } from '../prisma/prisma.service';

export interface ConversionRequest {
  tunisianRating: number;
  targetScale: 'france' | 'uk' | 'uae' | 'ifha';
}

@Controller('rating/ifha')
export class IFHARatingController {
  private readonly logger = new Logger(IFHARatingController.name);

  constructor(
    private readonly ifhaRatingService: IFHARatingService,
    private readonly prisma: PrismaService,
  ) {}

  /**
   * Calcule automatiquement le rating IFHA d'un cheval
   */
  @Post('calculate/:horseId')
  async calculateRating(@Param('horseId') horseId: string) {
    try {
      this.logger.log(`üèá Calcul du rating IFHA pour cheval ${horseId}`);
      
      const result = await this.ifhaRatingService.calculateHorseRating(horseId);

      this.logger.log(
        `‚úÖ Rating calcul√© pour ${horseId}: ${result.localRating} (confiance: ${result.confidence}%)`,
      );

      return result;
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Erreur inconnue';
      this.logger.error(`‚ùå Erreur calcul rating ${horseId}:`, message);
      throw new BadRequestException(`Erreur calcul rating: ${message}`);
    }
  }

  /**
   * Convertit un rating entre √©chelles internationales
   */
  @Post('convert')
  async convertRating(@Body() request: ConversionRequest) {
    try {
      const result = await this.ifhaRatingService.convertRating(
        request.tunisianRating,
        request.targetScale,
      );

      return {
        originalRating: result.original,
        convertedRating: result.converted,
        targetScale: result.scale,
        confidence: result.confidence,
      };
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Erreur inconnue';
      this.logger.error('‚ùå Erreur conversion rating:', message);
      throw new BadRequestException(`Erreur conversion: ${message}`);
    }
  }

  /**
   * Liste les ratings avec filtres
   */
  @Get('list')
  async listRatings(
    @Query('page') page: string = '1',
    @Query('limit') limit: string = '20',
    @Query('minRating') minRating?: string,
    @Query('maxRating') maxRating?: string,
  ) {
    try {
      const pageNum = parseInt(page, 10);
      const limitNum = parseInt(limit, 10);
      const skip = (pageNum - 1) * limitNum;

      const where: any = { isCurrent: true };

      if (minRating) {
        where.ratingValue = { ...where.ratingValue, gte: parseFloat(minRating) };
      }
      if (maxRating) {
        where.ratingValue = { ...where.ratingValue, lte: parseFloat(maxRating) };
      }

      const [ratings, total] = await Promise.all([
        this.prisma.horseRating.findMany({
          where,
          include: {
            horse: {
              select: {
                name: true,
                registrationNumber: true,
              },
            },
          },
          orderBy: {
            ratingValue: 'desc',
          },
          skip,
          take: limitNum,
        }),
        this.prisma.horseRating.count({ where }),
      ]);

      return {
        ratings,
        pagination: {
          currentPage: pageNum,
          totalPages: Math.ceil(total / limitNum),
          totalItems: total,
          itemsPerPage: limitNum,
        },
      };
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Erreur inconnue';
      this.logger.error('‚ùå Erreur liste ratings:', message);
      throw new BadRequestException(`Erreur liste: ${message}`);
    }
  }

  /**
   * D√©tail du rating d'un cheval
   */
  @Get('horse/:horseId/detail')
  async getRatingDetail(@Param('horseId') horseId: string) {
    try {
      const rating = await this.prisma.horseRating.findFirst({
        where: { horseId, isCurrent: true },
        include: {
          horse: {
            select: {
              name: true,
              registrationNumber: true,
            },
          },
        },
      });

      if (!rating) {
        throw new NotFoundException(`Rating non trouv√© pour cheval ${horseId}`);
      }

      // Calculer les conversions internationales
      const tunisianRating = Number(rating.ratingValue);
      const conversions = {
        france: Math.round(tunisianRating * 0.9 * 10) / 10,
        uk: Math.round(tunisianRating * 0.9 * 2.2 * 10) / 10,
        uae: Math.round(tunisianRating * 0.9 * 10) / 10,
        ifha: Math.round(tunisianRating * 0.85 * 10) / 10,
      };

      return {
        rating,
        internationalConversions: conversions,
        confidence: Number(rating.confidenceLevel),
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur d√©tail rating ${horseId}:`, error.message);
      throw new BadRequestException(`Erreur d√©tail: ${error.message}`);
    }
  }

  /**
   * Statistiques du syst√®me de rating
   */
  @Get('statistics')
  async getStatistics() {
    try {
      const stats = await this.ifhaRatingService.getStatistics();
      return stats;
    } catch (error) {
      this.logger.error('‚ùå Erreur statistiques:', error.message);
      throw new BadRequestException(`Erreur statistiques: ${error.message}`);
    }
  }

  /**
   * Conversion rapide multiple
   */
  @Post('convert-all/:rating')
  async convertAllScales(@Param('rating') rating: string) {
    try {
      const tunisianRating = parseFloat(rating);
      
      if (isNaN(tunisianRating)) {
        throw new BadRequestException('Rating invalide');
      }

      const scales = ['france', 'uk', 'uae', 'ifha'];
      const conversions = {};

      for (const scale of scales) {
        const result = await this.ifhaRatingService.convertRating(tunisianRating, scale);
        conversions[scale] = {
          rating: result.converted,
          confidence: result.confidence,
        };
      }

      return {
        originalRating: tunisianRating,
        conversions,
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur conversion multiple:', error.message);
      throw new BadRequestException(`Erreur conversion: ${error.message}`);
    }
  }

  /**
   * Recalcule tous les ratings obsol√®tes
   */
  @Post('recalculate-all')
  async recalculateAll() {
    try {
      this.logger.log('üîÑ D√©marrage recalcul massif des ratings...');

      // R√©cup√©rer tous les chevaux avec des ratings anciens
      const horses = await this.prisma.horse.findMany({
        where: {
          isActive: true,
          ratings: {
            some: { isCurrent: true },
          },
        },
        include: {
          ratings: {
            where: { isCurrent: true },
            take: 1,
          },
        },
      });

      let recalculated = 0;
      let errors = 0;

      for (const horse of horses) {
        try {
          await this.ifhaRatingService.calculateHorseRating(horse.id);
          recalculated++;
          
          // Petit d√©lai pour √©viter la surcharge
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Erreur recalcul ${horse.name}:`, error.message);
          errors++;
        }
      }

      const result = {
        success: true,
        message: `Recalcul termin√©: ${recalculated} succ√®s, ${errors} erreurs`,
        processed: horses.length,
        recalculated,
        errors,
        timestamp: new Date().toISOString(),
      };

      this.logger.log(`‚úÖ ${result.message}`);
      return result;
    } catch (error) {
      this.logger.error('‚ùå Erreur recalcul massif:', error.message);
      throw new BadRequestException(`Erreur recalcul: ${error.message}`);
    }
  }
}
