#!/bin/bash

echo "üîç DEBUG - FLUX DE CONNEXION D√âTAILL√â"
echo "====================================="
echo ""

BASE_URL="http://localhost:3000"

echo "üåê Configuration: $BASE_URL"
echo "üïí Date: $(date)"
echo ""

# Nettoyer les cookies pr√©c√©dents
rm -f debug_cookies.txt debug_cookies_*.txt

echo "1Ô∏è‚É£ √âTAPE - Acc√®s initial page login"
echo "=================================="

# R√©cup√©rer la page de login et sauvegarder les cookies
echo "üìã R√©cup√©ration page login avec cookies..."
login_page=$(curl -s -c debug_cookies_initial.txt -b debug_cookies_initial.txt "$BASE_URL/login")

echo "‚úÖ Page login r√©cup√©r√©e"
echo ""

# Analyser le contenu de la page
if echo "$login_page" | grep -q "csrf\|_token\|authenticity"; then
  echo "üîí Token CSRF d√©tect√© dans la page"
  csrf_token=$(echo "$login_page" | grep -o 'name="_token"[^>]*value="[^"]*"' | grep -o 'value="[^"]*"' | cut -d'"' -f2)
  if [ -n "$csrf_token" ]; then
    echo "   Token: $csrf_token"
  fi
else
  echo "‚ö†Ô∏è  Pas de token CSRF √©vident"
fi

echo ""

echo "2Ô∏è‚É£ √âTAPE - Soumission formulaire login"
echo "===================================="

echo "üîê Connexion avec monia@gmail.com..."

# Pr√©parer les donn√©es du formulaire
form_data="email=monia@gmail.com&password=password123"
if [ -n "$csrf_token" ]; then
  form_data="${form_data}&_token=${csrf_token}"
fi

echo "üì§ Donn√©es envoy√©es: $form_data"

# Effectuer la connexion avec suivi d√©taill√©
login_response=$(curl -s -v -L \
  -c debug_cookies_after_login.txt \
  -b debug_cookies_initial.txt \
  -X POST \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
  -H "User-Agent: Mozilla/5.0 (Linux; X11)" \
  -d "$form_data" \
  "$BASE_URL/login" 2>&1)

# Extraire le code de r√©ponse
login_code=$(echo "$login_response" | grep "< HTTP" | tail -1 | awk '{print $3}')
echo "üìä Code r√©ponse login: $login_code"

# V√©rifier les redirections
if echo "$login_response" | grep -q "Location:"; then
  redirect_url=$(echo "$login_response" | grep "< Location:" | awk '{print $3}' | tr -d '\r')
  echo "üîÑ Redirection vers: $redirect_url"
else
  echo "‚ùå Pas de redirection d√©tect√©e"
fi

echo ""

echo "3Ô∏è‚É£ √âTAPE - Analyse des cookies apr√®s login"
echo "=========================================="

echo "üç™ Cookies apr√®s connexion:"
if [ -f debug_cookies_after_login.txt ]; then
  while IFS= read -r line; do
    if [[ $line != \#* ]] && [[ -n $line ]]; then
      echo "   $line"
    fi
  done < debug_cookies_after_login.txt
else
  echo "   ‚ùå Aucun cookie trouv√©"
fi

echo ""

echo "4Ô∏è‚É£ √âTAPE - Test acc√®s dashboard apr√®s login"
echo "==========================================="

echo "üìä Acc√®s dashboard avec session..."
dashboard_response=$(curl -s -w "\nHTTP_CODE:%{http_code}\nREDIRECT_URL:%{redirect_url}" \
  -b debug_cookies_after_login.txt \
  -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
  -H "User-Agent: Mozilla/5.0 (Linux; X11)" \
  "$BASE_URL/dashboard")

dashboard_code=$(echo "$dashboard_response" | grep "HTTP_CODE:" | cut -d: -f2)
redirect_url=$(echo "$dashboard_response" | grep "REDIRECT_URL:" | cut -d: -f2-)

echo "üìä Dashboard code: $dashboard_code"
if [ -n "$redirect_url" ] && [ "$redirect_url" != "" ]; then
  echo "üîÑ Dashboard redirect: $redirect_url"
fi

# Analyser le contenu du dashboard
dashboard_content=$(echo "$dashboard_response" | head -n -2)

if [ "$dashboard_code" = "200" ]; then
  if echo "$dashboard_content" | grep -q "dashboard\|Dashboard\|Tableau"; then
    echo "‚úÖ Dashboard charg√© avec succ√®s"
    
    # V√©rifier si on a les vraies donn√©es
    if echo "$dashboard_content" | grep -q "totalHorses\|chevaux\|horses"; then
      echo "‚úÖ Donn√©es dashboard pr√©sentes"
    else
      echo "‚ö†Ô∏è  Dashboard charg√© mais pas de donn√©es visibles"
    fi
  else
    echo "‚ö†Ô∏è  Page charg√©e mais contenu suspect"
  fi
elif [ "$dashboard_code" = "302" ]; then
  echo "‚ö†Ô∏è  Dashboard redirige (probablement vers login)"
elif [ "$dashboard_code" = "401" ]; then
  echo "‚ùå Dashboard refuse l'acc√®s (session expir√©e?)"
else
  echo "‚ùå Dashboard inaccessible: $dashboard_code"
fi

echo ""

echo "5Ô∏è‚É£ √âTAPE - Test page d'accueil apr√®s login"
echo "=========================================="

echo "üè† Test page d'accueil avec session..."
home_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
  -b debug_cookies_after_login.txt \
  "$BASE_URL/")

home_code=$(echo "$home_response" | tail -1 | cut -d: -f2)
echo "üè† Page d'accueil: $home_code"

home_content=$(echo "$home_response" | head -n -1)
if echo "$home_content" | grep -q "Se connecter\|Login\|Connexion"; then
  echo "‚ö†Ô∏è  Page d'accueil montre encore le bouton login (session non reconnue?)"
elif echo "$home_content" | grep -q "D√©connexion\|Logout\|Profile\|Dashboard"; then
  echo "‚úÖ Page d'accueil reconna√Æt l'utilisateur connect√©"
else
  echo "‚ùì √âtat de connexion sur page d'accueil ind√©termin√©"
fi

echo ""

echo "6Ô∏è‚É£ √âTAPE - Test direct API avec session"
echo "======================================"

echo "üîå Test API /api/dashboard avec session..."
api_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
  -b debug_cookies_after_login.txt \
  -H "Accept: application/json" \
  "$BASE_URL/api/dashboard")

api_code=$(echo "$api_response" | tail -1 | cut -d: -f2)
echo "üîå API dashboard: $api_code"

if [ "$api_code" = "200" ]; then
  api_content=$(echo "$api_response" | head -n -1)
  if echo "$api_content" | grep -q "totalHorses\|horses\|chevaux"; then
    echo "‚úÖ API retourne des donn√©es"
  else
    echo "‚ö†Ô∏è  API r√©pond mais pas de donn√©es"
  fi
elif [ "$api_code" = "401" ]; then
  echo "‚ùå API refuse l'acc√®s"
else
  echo "‚ö†Ô∏è  API status inattendu: $api_code"
fi

echo ""

echo "üìã DIAGNOSTIC FINAL"
echo "=================="
echo ""

# Analyser les r√©sultats
if [ "$login_code" = "302" ] && [ "$dashboard_code" = "200" ]; then
  echo "‚úÖ FLUX DE CONNEXION FONCTIONNEL"
  echo "   ‚Ä¢ Login effectu√© avec succ√®s"
  echo "   ‚Ä¢ Dashboard accessible"
  echo "   ‚Ä¢ Session maintenue"
elif [ "$login_code" = "302" ] && [ "$dashboard_code" = "302" ]; then
  echo "‚ö†Ô∏è  PROBL√àME DE SESSION"
  echo "   ‚Ä¢ Login semble r√©ussir"
  echo "   ‚Ä¢ Mais dashboard redirige (session perdue?)"
elif [ "$login_code" = "200" ]; then
  echo "‚ùå √âCHEC DE CONNEXION"
  echo "   ‚Ä¢ Formulaire login renvoie erreur"
  echo "   ‚Ä¢ V√©rifier identifiants ou validation"
else
  echo "‚ùì √âTAT IND√âTERMIN√â"
  echo "   ‚Ä¢ Login code: $login_code"
  echo "   ‚Ä¢ Dashboard code: $dashboard_code"
fi

echo ""
echo "üéØ RECOMMANDATIONS:"

if [ "$dashboard_code" = "302" ] || [ "$dashboard_code" = "401" ]; then
  echo "   1. V√©rifier la configuration des sessions"
  echo "   2. Contr√¥ler la dur√©e de vie des cookies"
  echo "   3. Examiner les logs du serveur"
fi

if [ "$api_code" = "401" ]; then
  echo "   4. API et frontend ont des syst√®mes d'auth diff√©rents"
  echo "   5. Synchroniser l'authentification API/Frontend"
fi

echo ""
echo "üîß FICHIERS DE DEBUG CR√â√âS:"
echo "   ‚Ä¢ debug_cookies_initial.txt"
echo "   ‚Ä¢ debug_cookies_after_login.txt"

# Nettoyage optionnel (comment√© pour debug)
# rm -f debug_cookies_*.txt

echo ""
echo "üïí Debug termin√© √†: $(date)"
