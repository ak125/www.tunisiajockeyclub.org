#!/bin/bash

echo "üîç ANALYSE STRUCTURE BASE DE DONN√âES"
echo "===================================="
echo ""

BASE_URL="http://localhost:3000"

echo "üìä Analyse des tables et donn√©es disponibles..."
echo ""

# Test 1: R√©cup√©rer les stats g√©n√©rales
echo "1Ô∏è‚É£ STATISTIQUES G√âN√âRALES"
echo "========================="

stats_response=$(curl -s "$BASE_URL/api/dashboard/stats")
echo "Stats: $stats_response"

if echo "$stats_response" | grep -q "totalHorses"; then
    total_horses=$(echo "$stats_response" | grep -o '"totalHorses":[0-9]*' | cut -d: -f2)
    total_users=$(echo "$stats_response" | grep -o '"totalUsers":[0-9]*' | cut -d: -f2)
    total_races=$(echo "$stats_response" | grep -o '"totalRaces":[0-9]*' | cut -d: -f2)
    
    echo "‚úÖ Statistiques r√©cup√©r√©es:"
    echo "   ‚Ä¢ Chevaux: $total_horses"
    echo "   ‚Ä¢ Utilisateurs: $total_users" 
    echo "   ‚Ä¢ Courses: $total_races"
else
    echo "‚ö†Ô∏è  Statistiques indisponibles"
fi

echo ""

# Test 2: Tester le dashboard principal
echo "2Ô∏è‚É£ DASHBOARD PRINCIPAL"  
echo "======================"

dashboard_response=$(curl -s "$BASE_URL/api/dashboard/data")

if echo "$dashboard_response" | grep -q "overview"; then
    echo "‚úÖ Dashboard accessible"
    
    if echo "$dashboard_response" | grep -q "supabase_live"; then
        echo "‚úÖ Donn√©es Supabase en direct"
    elif echo "$dashboard_response" | grep -q "fallback"; then
        echo "‚ö†Ô∏è  Donn√©es de fallback utilis√©es"
    fi
else
    echo "‚ùå Dashboard inaccessible"
fi

echo ""

# Test 3: V√©rifier les vrais utilisateurs
echo "3Ô∏è‚É£ UTILISATEURS R√âELS"
echo "===================="

users_response=$(curl -s -X POST "$BASE_URL/api/auth/users-sample")

if echo "$users_response" | grep -q "fallback.*true"; then
    echo "‚ö†Ô∏è  Fallback utilis√© - Supabase non connect√©"
    echo ""
    echo "üìã Donn√©es de votre base Supabase (selon votre information):"
    echo "   ‚Ä¢ Users: 97 utilisateurs (17 colonnes)"
    echo "   ‚Ä¢ Horses: 46 chevaux (15 colonnes)"
    echo "   ‚Ä¢ Jockeys: 42 jockeys (10 colonnes)"
    echo "   ‚Ä¢ Owners: 33 propri√©taires (7 colonnes)"
    echo "   ‚Ä¢ Trainers: 21 entra√Æneurs (8 colonnes)"
    echo "   ‚Ä¢ Races: 8 courses (15 colonnes)"
    echo "   ‚Ä¢ Race entries: 16 inscriptions (13 colonnes)"
    echo "   ‚Ä¢ Race results: 8 r√©sultats (12 colonnes)"
    echo "   ‚Ä¢ Racecourses: 5 hippodromes (7 colonnes)"
    echo "   ‚Ä¢ Sessions: 0 sessions (7 colonnes)"
elif echo "$users_response" | grep -q "users"; then
    user_count=$(echo "$users_response" | grep -o '"totalFound":[0-9]*' | cut -d: -f2)
    echo "‚úÖ Utilisateurs r√©cup√©r√©s: $user_count"
    
    # Extraire quelques emails pour les tests
    echo "üìß Emails disponibles pour tests:"
    echo "$users_response" | grep -o '"email":"[^"]*"' | head -5 | sed 's/"email":"/   ‚Ä¢ /' | sed 's/"$//'
else
    echo "‚ùå Impossible de r√©cup√©rer les utilisateurs"
fi

echo ""

# Test 4: Performance
echo "4Ô∏è‚É£ PERFORMANCE SYST√àME"
echo "====================="

echo "üìä Test de performance des endpoints..."

# Mesurer API dashboard
start_time=$(date +%s%N)
curl -s "$BASE_URL/api/dashboard/stats" > /dev/null
end_time=$(date +%s%N)
dashboard_duration=$(( (end_time - start_time) / 1000000 ))

echo "‚Ä¢ Dashboard stats: ${dashboard_duration}ms"

# Mesurer API auth
start_time=$(date +%s%N)
curl -s -X POST "$BASE_URL/api/auth/check" > /dev/null
end_time=$(date +%s%N)
auth_duration=$(( (end_time - start_time) / 1000000 ))

echo "‚Ä¢ Auth check: ${auth_duration}ms"

# Mesurer frontend dashboard
start_time=$(date +%s%N)
curl -s "$BASE_URL/dashboard" > /dev/null
end_time=$(date +%s%N)
frontend_duration=$(( (end_time - start_time) / 1000000 ))

echo "‚Ä¢ Frontend dashboard: ${frontend_duration}ms"

echo ""

# Test 5: Test d'authentification optimis√©e
echo "5Ô∏è‚É£ TEST AUTHENTIFICATION"
echo "======================="

echo "üîê Test avec utilisateurs de d√©veloppement..."

dev_users=("monia@gmail.com:password123" "admin@tjc.tn:admin123" "test@test.com:test123")

for user_pass in "${dev_users[@]}"; do
    email=$(echo $user_pass | cut -d: -f1)
    password=$(echo $user_pass | cut -d: -f2)
    
    start_time=$(date +%s%N)
    auth_result=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$email\",\"password\":\"$password\"}" \
        "$BASE_URL/api/auth/login")
    end_time=$(date +%s%N)
    duration=$(( (end_time - start_time) / 1000000 ))
    
    if echo "$auth_result" | grep -q "success.*true"; then
        source=$(echo "$auth_result" | grep -o '"source":"[^"]*"' | cut -d'"' -f4)
        echo "   ‚úÖ $email (${duration}ms, source: $source)"
    else
        echo "   ‚ùå $email (${duration}ms)"
    fi
done

echo ""

# R√©sum√© et recommandations
echo "üìã R√âSUM√â ET RECOMMANDATIONS"
echo "============================"
echo ""

if echo "$users_response" | grep -q "fallback.*true"; then
    echo "üîß CONFIGURATION REQUISE:"
    echo "   1. Configurez les variables Supabase dans .env"
    echo "   2. Utilisez: ./configure-supabase.sh pour les instructions"
    echo "   3. Red√©marrez le serveur apr√®s configuration"
    echo ""
    echo "üìß UTILISATEURS TEMPORAIRES:"
    echo "   ‚Ä¢ monia@gmail.com / password123"
    echo "   ‚Ä¢ admin@tjc.tn / admin123"
    echo "   ‚Ä¢ test@test.com / test123"
else
    echo "‚úÖ SYST√àME CONFIGUR√â:"
    echo "   ‚Ä¢ Supabase connect√©"
    echo "   ‚Ä¢ Vraies donn√©es disponibles"
    echo "   ‚Ä¢ Authentification fonctionnelle"
fi

if [ ${frontend_duration:-1000} -gt 2000 ]; then
    echo ""
    echo "‚ö° OPTIMISATION PERFORMANCE:"
    echo "   ‚Ä¢ Frontend dashboard lent (${frontend_duration}ms)"
    echo "   ‚Ä¢ Consid√©rer la mise en cache"
    echo "   ‚Ä¢ Optimiser les requ√™tes Prisma"
else
    echo ""
    echo "‚úÖ PERFORMANCE ACCEPTABLE:"
    echo "   ‚Ä¢ API rapide (<1s)"
    echo "   ‚Ä¢ Frontend acceptable (<2s)"
fi

echo ""
echo "üéØ PROCHAINES √âTAPES:"
echo "   1. Configurez Supabase si pas encore fait"
echo "   2. Testez avec vos vrais utilisateurs"
echo "   3. Le syst√®me est pr√™t pour la production !"

echo ""
echo "üïí Analyse termin√©e √†: $(date)"
