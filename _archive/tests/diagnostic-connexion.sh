#!/bin/bash

echo "üîç DIAGNOSTIC - PROBL√àME DE CONNEXION"
echo "===================================="
echo ""

BASE_URL="http://localhost:3000"

# Test 1: Page de login accessible ?
echo "1Ô∏è‚É£ V√©rification page de login"
echo "==============================" 
login_status=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/login")
echo "Status page login: $login_status"

if [ "$login_status" = "200" ]; then
    echo "‚úÖ Page de login accessible"
else
    echo "‚ùå Page de login inaccessible"
    exit 1
fi

echo ""

# Test 2: API d'authentification fonctionne ?
echo "2Ô∏è‚É£ Test API d'authentification"
echo "==============================="
api_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d '{"email":"monia@gmail.com","password":"password123"}' \
    "$BASE_URL/api/auth/login")

echo "R√©ponse API: $api_response"

if echo "$api_response" | grep -q "success.*true"; then
    echo "‚úÖ API d'auth fonctionne"
else
    echo "‚ùå API d'auth ne fonctionne pas"
    exit 1
fi

echo ""

# Test 3: Soumission formulaire avec cookies
echo "3Ô∏è‚É£ Test soumission formulaire complet"
echo "====================================="

# √âtape 1: R√©cup√©rer la page login et cookies
echo "üìã R√©cup√©ration page login avec cookies..."
curl -s -c test_cookies.txt "$BASE_URL/login" > /dev/null

echo "üì§ Soumission du formulaire de login..."
form_response=$(curl -s -v \
    -c test_cookies_after.txt \
    -b test_cookies.txt \
    -X POST \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "email=monia@gmail.com&password=password123" \
    "$BASE_URL/login" 2>&1)

# Analyser la r√©ponse
http_code=$(echo "$form_response" | grep "< HTTP" | tail -1 | awk '{print $3}')
location=$(echo "$form_response" | grep "< location:" | awk '{print $3}' | tr -d '\r')

echo "Code de r√©ponse: $http_code"
echo "Location: $location"

if [ "$http_code" = "302" ]; then
    echo "‚úÖ Formulaire soumis avec succ√®s (redirection)"
    if [ "$location" = "/dashboard" ]; then
        echo "‚úÖ Redirection vers dashboard"
    else
        echo "‚ö†Ô∏è  Redirection inattendue: $location"
    fi
else
    echo "‚ùå Probl√®me soumission formulaire: $http_code"
    echo "R√©ponse compl√®te:"
    echo "$form_response" | tail -20
fi

echo ""

# Test 4: Acc√®s dashboard apr√®s login
echo "4Ô∏è‚É£ Test acc√®s dashboard apr√®s login"
echo "==================================="

dashboard_response=$(curl -s -w "\nSTATUS:%{http_code}" \
    -b test_cookies_after.txt \
    "$BASE_URL/dashboard")

dashboard_status=$(echo "$dashboard_response" | tail -1 | cut -d: -f2)
dashboard_content=$(echo "$dashboard_response" | head -n -1)

echo "Status dashboard: $dashboard_status"

if [ "$dashboard_status" = "200" ]; then
    if echo "$dashboard_content" | grep -q "Dashboard\|dashboard\|Tableau"; then
        echo "‚úÖ Dashboard accessible et charg√©"
    else
        echo "‚ö†Ô∏è  Dashboard accessible mais contenu suspect"
    fi
elif [ "$dashboard_status" = "302" ]; then
    echo "‚ö†Ô∏è  Dashboard redirige (peut-√™tre vers login?)"
else
    echo "‚ùå Dashboard inaccessible: $dashboard_status"
fi

echo ""

# Test 5: Test avec mauvais identifiants
echo "5Ô∏è‚É£ Test avec identifiants invalides"
echo "==================================="

bad_form_response=$(curl -s -w "\nSTATUS:%{http_code}" \
    -X POST \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "email=wrong@email.com&password=wrongpass" \
    "$BASE_URL/login")

bad_status=$(echo "$bad_form_response" | tail -1 | cut -d: -f2)
bad_content=$(echo "$bad_form_response" | head -n -1)

echo "Status avec mauvais identifiants: $bad_status"

if [ "$bad_status" = "401" ]; then
    echo "‚úÖ Erreur correctement g√©r√©e"
elif [ "$bad_status" = "200" ]; then
    if echo "$bad_content" | grep -q "error\|Error\|erreur"; then
        echo "‚úÖ Erreur affich√©e dans le formulaire"
    else
        echo "‚ùå Pas d'erreur visible avec mauvais identifiants"
    fi
else
    echo "‚ö†Ô∏è  R√©ponse inattendue: $bad_status"
fi

echo ""

# R√©sum√© du diagnostic
echo "üìã DIAGNOSTIC FINAL"
echo "=================="
echo ""

problems=0

if [ "$login_status" != "200" ]; then
    echo "‚ùå Page login inaccessible"
    problems=$((problems + 1))
fi

if ! echo "$api_response" | grep -q "success.*true"; then
    echo "‚ùå API auth ne fonctionne pas"
    problems=$((problems + 1))
fi

if [ "$http_code" != "302" ]; then
    echo "‚ùå Formulaire login ne redirige pas"
    problems=$((problems + 1))
fi

if [ "$dashboard_status" != "200" ]; then
    echo "‚ùå Dashboard inaccessible apr√®s login"
    problems=$((problems + 1))
fi

if [ $problems -eq 0 ]; then
    echo "‚úÖ AUCUN PROBL√àME D√âTECT√â"
    echo ""
    echo "Le syst√®me d'authentification fonctionne correctement."
    echo "Si vous ne pouvez pas vous connecter, v√©rifiez:"
    echo "‚Ä¢ Utilisez un des comptes de test:"
    echo "  - monia@gmail.com / password123"
    echo "  - admin@tjc.tn / admin123" 
    echo "  - test@test.com / test123"
    echo "‚Ä¢ V√©rifiez que les champs sont bien remplis"
    echo "‚Ä¢ Essayez en navigation priv√©e"
else
    echo "‚ùå PROBL√àMES D√âTECT√âS: $problems"
    echo ""
    echo "V√©rifiez les logs du serveur pour plus de d√©tails."
fi

echo ""
echo "üåê URLs de test:"
echo "  ‚Ä¢ Login: $BASE_URL/login"
echo "  ‚Ä¢ Dashboard: $BASE_URL/dashboard"
echo "  ‚Ä¢ API Auth: $BASE_URL/api/auth/login"

# Nettoyage
rm -f test_cookies.txt test_cookies_after.txt

echo ""
echo "üïí Diagnostic termin√© √†: $(date)"
