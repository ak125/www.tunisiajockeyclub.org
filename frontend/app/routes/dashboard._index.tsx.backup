import { json, type LoaderFunctionArgs } from "@remix-run/node";
import { useLoaderData } from '@remix-run/react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';
import { Calendar, Trophy, Users, Activity, TrendingUp, Zap, Award, Target, BarChart3, PieChart as PieChartIcon } from 'lucide-react';

// Import du nouveau design system
import {
  Container,
  Section,
  SectionTitle,
  Card,
  StatBand,
  CardGrid,
  Header,
  Logo,
  SystemStatus
} from '../components/design-system/Institutional';

import { 
  getDashboardStats, 
  getMonthlyRaceData, 
  getHorsePerformance, 
  getRaceTypeDistribution, 
  getRecentRaces 
} from '~/services/dashboard.server';
import { getRatingStatistics } from '~/services/rating.server';

// Mock data pour fallback
const generateMockData = () => {
  const coursesData = [
    { mois: 'Jan', courses: 12, participants: 156 },
    { mois: 'Fév', courses: 15, participants: 198 },
    { mois: 'Mar', courses: 18, participants: 234 },
    { mois: 'Avr', courses: 22, participants: 287 },
    { mois: 'Mai', courses: 19, participants: 245 },
    { mois: 'Jun', courses: 25, participants: 312 }
  ];

  const performanceData = [
    { nom: 'Thunder Storm', victoires: 12, courses: 18 },
    { nom: 'Desert Wind', victoires: 8, courses: 15 },
    { nom: 'Golden Arrow', victoires: 10, courses: 16 },
    { nom: 'Lightning Bolt', victoires: 6, courses: 12 },
    { nom: 'Arabian Dream', victoires: 9, courses: 14 }
  ];

  const raceTypeData = [
    { type: 'Plat', nombre: 45, couleur: '#0F766E' },
    { type: 'Obstacles', nombre: 28, couleur: '#D21C1C' },
    { type: 'Trot', nombre: 32, couleur: '#059669' },
    { type: 'Cross', nombre: 18, couleur: '#D97706' }
  ];

  return { coursesData, performanceData, raceTypeData };
};

export const loader = async ({ request }: LoaderFunctionArgs) => {
  try {
    const [stats, monthlyData, horsePerformance, raceTypes, recentRaces, ratingStats] = await Promise.allSettled([
      getDashboardStats(),
      getMonthlyRaceData(),
      getHorsePerformance(),
      getRaceTypeDistribution(),
      getRecentRaces(),
      getRatingStatistics()
    ]);

    const mockData = generateMockData();

    return json({
      stats: stats.status === 'fulfilled' ? stats.value : {
        totalRaces: 124,
        activeHorses: 89,
        registeredJockeys: 32,
        averageRating: 78.5,
        upcomingEvents: 8,
        monthlyGrowth: 12.5
      },
      monthlyData: monthlyData.status === 'fulfilled' ? monthlyData.value : mockData.coursesData,
      horsePerformance: horsePerformance.status === 'fulfilled' ? horsePerformance.value : mockData.performanceData,
      raceTypes: raceTypes.status === 'fulfilled' ? raceTypes.value : mockData.raceTypeData,
      recentRaces: recentRaces.status === 'fulfilled' ? recentRaces.value : [],
      ratingStats: ratingStats.status === 'fulfilled' ? ratingStats.value : {
        totalRatings: 156,
        averageRating: 78.5,
        topRating: 95.2
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    const mockData = generateMockData();
    return json({
      stats: {
        totalRaces: 124,
        activeHorses: 89,
        registeredJockeys: 32,
        averageRating: 78.5,
        upcomingEvents: 8,
        monthlyGrowth: 12.5
      },
      monthlyData: mockData.coursesData,
      horsePerformance: mockData.performanceData,
      raceTypes: mockData.raceTypeData,
      recentRaces: [],
      ratingStats: {
        totalRatings: 156,
        averageRating: 78.5,
        topRating: 95.2
      },
      timestamp: new Date().toISOString(),
    });
  }
};

// Header institutionnel Dashboard
function DashboardHeader() {
  return (
    <Header>
      <div className="flex items-center">
        <Logo size="default" className="mr-3" />
        <div>
          <h1 className="text-lg font-bold text-slate-900">Dashboard Institutionnel</h1>
          <p className="text-sm text-slate-600">Tunisia Jockey Club - Analytics</p>
        </div>
      </div>
      
      <div className="flex items-center space-x-4">
        <SystemStatus />
        <div className="text-sm text-slate-600">
          Système IFHA Certifié
        </div>
      </div>
    </Header>
  );
}

// Section des KPIs Institutionnels
function KPISection({ stats }: { stats: any }) {
  const kpiData = [
    { 
      number: stats.totalRaces, 
      label: 'Courses Organisées',
      growth: '+12%'
    },
    { 
      number: stats.activeHorses, 
      label: 'Chevaux Actifs',
      growth: '+8%'
    },
    { 
      number: stats.registeredJockeys, 
      label: 'Jockeys Licenciés',
      growth: '+5%'
    },
    { 
      number: stats.averageRating.toFixed(1), 
      label: 'Rating IFHA Moyen',
      growth: '+3.2'
    }
  ];

  return (
    <Section background="alternate">
      <Container>
        <div className="text-center mb-8">
          <SectionTitle>Indicateurs de Performance</SectionTitle>
          <p className="text-slate-600">Métriques clés de l'activité hippique tunisienne</p>
        </div>
        
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
          {kpiData.map((kpi, index) => (
            <Card key={index} className="text-center">
              <div className="text-3xl font-bold text-brand-600 mb-2">
                {typeof kpi.number === 'number' ? kpi.number.toLocaleString('fr-FR') : kpi.number}
              </div>
              <div className="text-sm font-medium text-slate-900 mb-1">
                {kpi.label}
              </div>
              <div className="text-xs text-emerald-600 font-medium">
                {kpi.growth} ce mois
              </div>
            </Card>
          ))}
        </div>
      </Container>
    </Section>
  );
}

// Section Graphiques Analytiques
function AnalyticsSection({ monthlyData, horsePerformance, raceTypes }: any) {
  return (
    <Section background="default">
      <Container>
        <SectionTitle className="text-center mb-12">Analytics Institutionnelles</SectionTitle>
        
        <CardGrid>
          {/* Évolution Mensuelle */}
          <Card className="col-span-full lg:col-span-2">
            <div className="flex items-center mb-4">
              <BarChart3 className="w-6 h-6 text-brand-600 mr-3" />
              <h3 className="text-xl font-semibold text-slate-900">Évolution des Courses</h3>
            </div>
            
            <div style={{ width: '100%', height: '300px' }}>
              <ResponsiveContainer>
                <LineChart data={monthlyData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#E2E8F0" />
                  <XAxis 
                    dataKey="mois" 
                    stroke="#64748B"
                    fontSize={12}
                  />
                  <YAxis stroke="#64748B" fontSize={12} />
                  <Tooltip 
                    contentStyle={{
                      backgroundColor: 'white',
                      border: '1px solid #E2E8F0',
                      borderRadius: '8px',
                      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                  <Legend />
                  <Line 
                    type="monotone" 
                    dataKey="courses" 
                    stroke="#0F766E" 
                    strokeWidth={3}
                    name="Courses"
                    dot={{ fill: '#0F766E', r: 4 }}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="participants" 
                    stroke="#D21C1C" 
                    strokeWidth={2}
                    name="Participants"
                    dot={{ fill: '#D21C1C', r: 3 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </Card>

          {/* Top Performers */}
          <Card>
            <div className="flex items-center mb-4">
              <Trophy className="w-6 h-6 text-racing-gold-500 mr-3" />
              <h3 className="text-xl font-semibold text-slate-900">Top Performers</h3>
            </div>
            
            <div style={{ width: '100%', height: '300px' }}>
              <ResponsiveContainer>
                <BarChart data={horsePerformance} layout="horizontal">
                  <CartesianGrid strokeDasharray="3 3" stroke="#E2E8F0" />
                  <XAxis type="number" stroke="#64748B" fontSize={12} />
                  <YAxis 
                    dataKey="nom" 
                    type="category" 
                    stroke="#64748B" 
                    fontSize={10}
                    width={80}
                  />
                  <Tooltip 
                    contentStyle={{
                      backgroundColor: 'white',
                      border: '1px solid #E2E8F0',
                      borderRadius: '8px',
                      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                  <Bar 
                    dataKey="victoires" 
                    fill="#0F766E" 
                    name="Victoires"
                    radius={[0, 4, 4, 0]}
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </Card>

          {/* Distribution des Types de Course */}
          <Card>
            <div className="flex items-center mb-4">
              <PieChartIcon className="w-6 h-6 text-stable-blue-600 mr-3" />
              <h3 className="text-xl font-semibold text-slate-900">Types de Courses</h3>
            </div>
            
            <div style={{ width: '100%', height: '300px' }}>
              <ResponsiveContainer>
                <PieChart>
                  <Pie
                    data={raceTypes}
                    dataKey="nombre"
                    nameKey="type"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    label={({ type, nombre }) => `${type}: ${nombre}`}
                  >
                    {raceTypes.map((entry: any, index: number) => (
                      <Cell key={`cell-${index}`} fill={entry.couleur} />
                    ))}
                  </Pie>
                  <Tooltip 
                    contentStyle={{
                      backgroundColor: 'white',
                      border: '1px solid #E2E8F0',
                      borderRadius: '8px',
                      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </CardGrid>
      </Container>
    </Section>
  );
}

// Section Actions Rapides
function QuickActionsSection() {
  const actions = [
    {
      icon: Trophy,
      title: 'Nouveau Rating IFHA',
      description: 'Calculer le rating d\'une performance',
      link: '/rating/calculateur',
      color: 'text-brand-600',
      bgColor: 'bg-brand-50 hover:bg-brand-100'
    },
    {
      icon: Calendar,
      title: 'Planifier Course',
      description: 'Organiser un nouvel événement',
      link: '/race-management',
      color: 'text-stable-blue-600',
      bgColor: 'bg-blue-50 hover:bg-blue-100'
    },
    {
      icon: Users,
      title: 'Gestion Licences',
      description: 'Administrer les jockeys',
      link: '/dashboard/jockeys',
      color: 'text-racing-gold-600',
      bgColor: 'bg-yellow-50 hover:bg-yellow-100'
    },
    {
      icon: BarChart3,
      title: 'Analytics Avancées',
      description: 'Rapports détaillés',
      link: '/dashboard/analytics',
      color: 'text-emerald-600',
      bgColor: 'bg-emerald-50 hover:bg-emerald-100'
    }
  ];

  return (
    <Section background="alternate">
      <Container>
        <SectionTitle className="text-center mb-8">Actions Institutionnelles</SectionTitle>
        
        <CardGrid>
          {actions.map((action, index) => (
            <Card key={index} className={`text-center group cursor-pointer ${action.bgColor} transition-all duration-300`}>
              <div className="mb-4">
                <div className="w-16 h-16 bg-white rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300 shadow-sm">
                  <action.icon className={`w-8 h-8 ${action.color}`} />
                </div>
                <h3 className="text-lg font-semibold text-slate-900 mb-2">{action.title}</h3>
                <p className="text-slate-600 text-sm">{action.description}</p>
              </div>
              
              <div className="mt-4">
                <a 
                  href={action.link}
                  className="inline-flex items-center text-sm font-medium text-slate-700 hover:text-slate-900 transition-colors"
                >
                  Accéder <TrendingUp className="w-4 h-4 ml-1" />
                </a>
              </div>
            </Card>
          ))}
        </CardGrid>
      </Container>
    </Section>
  );
}

export default function InstitutionalDashboard() {
  const { stats, monthlyData, horsePerformance, raceTypes } = useLoaderData<typeof loader>();

  return (
    <main className="animate-fade-in-up" style={{ fontFamily: 'system-ui, -apple-system, sans-serif' }}>
      <DashboardHeader />
      <KPISection stats={stats} />
      <AnalyticsSection 
        monthlyData={monthlyData} 
        horsePerformance={horsePerformance} 
        raceTypes={raceTypes} 
      />
      <QuickActionsSection />
      
      {/* Footer Status */}
      <div className="bg-slate-50 py-4">
        <Container>
          <div className="flex items-center justify-between text-sm text-slate-600">
            <div>
              Dashboard mis à jour en temps réel • Système IFHA certifié
            </div>
            <div className="flex items-center space-x-4">
              <SystemStatus isOnline={true} />
              <span>Dernière sync: maintenant</span>
            </div>
          </div>
        </Container>
      </div>
    </main>
  );
}
